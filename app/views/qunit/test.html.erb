<div id="qunit">

</div>

<% content_for :stylesheets_header do %>
 <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.9.0.css" type="text/css" />
<% end %>

<% content_for :scripts_footer do %>
 <script src="http://code.jquery.com/qunit/qunit-1.9.0.js"></script>
 <script>
  module("LocationType")

  test("should exist", function () {
   ok( LocationType )
  }) 

  test("should not have a javascript prefix by default", function () {
   var loc = new LocationType({user_id:1})
   equal("location_type" in loc.toJSON(), false)
  })

  test("should be able to turn on javascript prefix", function () {
   var loc = new LocationType({user_id:1})
   loc.jsonPrefix = true
   equal("location_type" in loc.toJSON(), true)
  })

  test("should create new instance", function () {
   var l = new LocationType({user:new User({id:1})})
   ok( l instanceof LocationType )
  })
 
  test("should have proper resource url", function () {
   var user = new User({id:1,slug:"user"}),
   slug = "location-type-slug",
   l = new LocationType({user:user,slug:slug})
   equal( l.url(), "/" + user.get("slug") + "/" + l.get("slug") )
  })

  test("should throw exception if user isn't specified", function () {
   throws(
    function () {
     var l = new LocationType() 
    },
    MissingUserException,
    "User needs to be specified"
    )
  })

  module("User")
 
  test("should exist", function () {
   ok( User )
  }) 

  test("should create a new user", function () {
   var u = new User()
   ok( u instanceof User )
  })

  test("should return proper user url", function () {
   var user = new User({id:1,slug:"user"})
   equal( user.url(), "/" + user.get("slug") ) 
  })

  module("Location")
 
  test("should exist", function () {
   ok( Location )
  })

  test("should not have a javascript prefix by default", function () {
   var loc = new Location()
   notEqual("location" in loc.toJSON(), true)
  })

  test("should be able to turn on javascript prefix", function () {
   var loc = new Location()
   loc.jsonPrefix = true
   notEqual("location" in loc.toJSON(), false)
  })

  module("LocationCollection")
 
  test("should exist", function () {
   ok( LocationCollection )
  })
  
  test("should have correct url", function () {
   var user = new User({slug:"user",id:2}),
   col = new LocationCollection({user: user})
   equal( col.url(), "/" + user.get("slug") + "/location_types?format=" + col.format )
  })

  asyncTest("Location Collection fetch", 1, function () {
   var user = new User({slug:1,id:1}),
   col = new LocationCollection({user: user})
    col.fetch({success: function (e) {
    ok( e instanceof LocationCollection )
    start()
   }})
  })
 

 </script>
<% end %>
