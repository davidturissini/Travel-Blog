<article id="location" data-location_type="<%= @location.location_type.to_json %>" data-json="<%= @location.to_json %>">
	<header>
		<h1 id="location-title"><%= @location.title %></h1>
		<h2><%= "#{@location.city}, " if @location.city %><%= "#{@location.state}, " if @location.state %><%= @location.country_name %>
	</header>
	<ul id="photos">
		<% @location.photos["photo"].each do |photo| %>
			<li><img src="<%= FlickRaw.url_t(photo) %>" class="photo" data-json="<%= photo.to_json %>" /></li>
		<% end %>
	</ul>
	<section id="journal_entries">
		<% @location.journal_entries.each do |entry| %>
			<%= render "journal_entry", :entry => entry %>
		<% end %>
	</section>
	<figure id="map"></figure>
	
	<br class="clear" />
	<% if current_user.owns?(@location) %>
		<div class="toolbox">
			<%= link_to "Edit #{@location.title}", edit_location_path(@location) %> |
			<%= link_to "Add new journal entry for #{@location.title}", new_user_location_type_location_journal_entry_path({
			:user_id => current_user.slug,
			:location_type_id => @location.location_type.slug,
			:location_id => @location.slug
			}), :class => "new-journal-entry-link"
			%>
		</div>
	<% end %>
</article>


<% content_for :scripts_footer do %>
<script>


var ScrollHandler = function (options) {
	var scroll = this
	scroll.target = options.target

	function distanceToTop() {
		var relative = scroll.target.offsetParent,
		offset = scroll.target.offsetTop

		while(relative != document.body) {
			offset += relative.offsetTop
			relative = relative.offsetParent
		}

		return offset
	}

	function pixelsVisible() {
		return (options.target.offsetHeight - pixelsBelowFold()) * 100
	}

	function pixelsBelowFold() {
		return distanceToTop() + options.target.offsetHeight - windowVisibleY()[1]
	}

	function windowVisibleY() {
		var scrollTop = window.scrollY
		return [scrollTop, window.innerHeight + scrollTop]
	}

	function percentVisible() {
		return pixelsVisible() / options.target.offsetHeight
	}

	function calculateScroll() {
		var elemTop = distanceToTop(),
		visibleYRange = windowVisibleY()

		if( elemTop > visibleYRange[0] && elemTop < visibleYRange[1] && options.onScroll ) { 
			options.onScroll({
				percentVisible:percentVisible(),
				pixelsVisible:pixelsVisible()
			});
		}
	}

	window.addEventListener("scroll", function (e) {
		calculateScroll()

	})

	calculateScroll()
}

window.addEventListener("DOMContentLoaded", function () {
	
	(function () {
		var photos = document.getElementById("photos"),
		hasShuffled = false

		function positionPhoto(photo, index) {
				var leftMultiplier = Math.cos(index),
				horizontalBounds = ((window.innerWidth - 200) / 2),
				top = (Math.random() * (photos.offsetHeight - photo.offsetHeight)),
				left = (photos.offsetWidth / 2) + (horizontalBounds * leftMultiplier) - photo.offsetWidth / 2,
				rotate = Math.sin(index) * 10
			
				photo.style.webkitTransform = "translateX(" + left + "px) translateY(" + top + "px)";
				photo.style.opacity = 1;
				photo.style.webkitTransform += " rotate(" + rotate + "deg)"
		}

		new ScrollHandler({
			target:photos,
			onScroll:function(e) {
				if(e.percentVisible > 80 && !hasShuffled) {
					hasShuffled = true;
					[].forEach.call(photos.querySelectorAll(".photo"), function (photo, index) {
						if( photo.width != 0 ) {
							positionPhoto(photo, index)
						} else {
							photo.onload = function () {
								positionPhoto(photo, index)
							}
						}
						
					})
				}
			}
		})
	})();

	var loc = new Location(JSON.parse( document.getElementById("location").getAttribute("data-json") )),
	locationType = new Location(JSON.parse( document.getElementById("location").getAttribute("data-location_type") )),
	map = new google.maps.Map(document.getElementById("map"), {
		disableDefaultUI: true,
		zoom: 4,
		center: new google.maps.LatLng(loc.get("latitude"), loc.get("longitude")),
		mapTypeId: google.maps.MapTypeId.HYBRID
		})
		new LocationMarker({
		model:loc,
		map:map,
		locationType:locationType
		}).render()

	})
</script>
<% end %>
