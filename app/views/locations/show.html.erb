<article id="location" data-location_type="<%= @location.location_type.to_json %>" data-json="<%= @location.to_json %>">
	<header>
		<h1 id="location-title"><%= @location.title %></h1>
		<h2><%= "#{@location.city}, " if @location.city %><%= "#{@location.state}, " if @location.state %><%= @location.country_name %>
	</header>
	<section id="photos">
		<ul class="autoclear">
			<% @location.photos["photo"].each do |photo| %>
				<li>
					<figure<%= ' class="hero"'.html_safe if photo_filename(FlickRaw.url(photo)) == photo_filename(@location.photo_url) %>>
						<img src="<%= FlickRaw.url(photo) %>" class="photo" data-json="<%= photo.to_json %>" alt="<%= photo["title"] %>" title="<%= photo["title"] %>" />
						<% if photo["title"] %>
							<figcaption>
								<h1><%= photo['title'] %></h1>
							</figcaption>
						<% end %>
					</figure>
				</li>
			<% end %>
		</ul>
	</section>
	<section id="journal_entries">
		<% @location.journal_entries.each do |entry| %>
			<%= render "journal_entry", :entry => entry %>
		<% end %>
	</section>
	<figure id="map"></figure>
	
	<br class="clear" />
	<% if current_user.owns?(@location) %>
		<div class="toolbox">
			<%= link_to "Edit #{@location.title}", edit_location_path(@location) %> |
			<%= link_to "Add new journal entry for #{@location.title}", new_user_location_type_location_journal_entry_path({
			:user_id => current_user.slug,
			:location_type_id => @location.location_type.slug,
			:location_id => @location.slug
			}), :class => "new-journal-entry-link"
			%>
		</div>
	<% end %>
</article>


<% content_for :scripts_footer do %>
<script>


var ScrollHandler = function (options) {
	var scroll = this
	scroll.target = options.target

	function distanceToTop() {
		var relative = scroll.target.offsetParent,
		offset = scroll.target.offsetTop

		while(relative != document.body) {
			offset += relative.offsetTop
			relative = relative.offsetParent
		}

		return offset
	}

	function pixelsVisible() {
		return (options.target.offsetHeight - pixelsBelowFold()) * 100
	}

	function pixelsBelowFold() {
		return distanceToTop() + options.target.offsetHeight - windowVisibleY()[1]
	}

	function windowVisibleY() {
		var scrollTop = window.scrollY
		return [scrollTop, window.innerHeight + scrollTop]
	}

	function percentVisible() {
		return pixelsVisible() / options.target.offsetHeight
	}

	function calculateScroll() {
		var elemTop = distanceToTop(),
		visibleYRange = windowVisibleY()

		if( elemTop > visibleYRange[0] && elemTop < visibleYRange[1] && options.onScroll ) { 
			options.onScroll({
				percentVisible:percentVisible(),
				pixelsVisible:pixelsVisible()
			});
		}
	}

	window.addEventListener("scroll", function (e) {
		calculateScroll()

	})

	calculateScroll()
}

var Gallery = Backbone.View.extend({
	initialize: function () {
		var gallery = this

		gallery.__keyup = function (e) {
			switch(e.which) {
				case 27:
					gallery.close()
					break;
				case 37:
					gallery.focusPrev()
					break;
				case 39:
					gallery.focusNext()
					break;
			}
		}
	},
	__distanceToLeft: function () {
		var relative = this.el.offsetParent,
		offset = this.el.offsetLeft

		while(relative != document.body) {
			offset += relative.offsetLeft
			relative = relative.offsetParent
		}

		return offset
	},
	close: function () {
		var gallery = this
		this.el.className = this.el.className.replace(" gallery", "")
		this.el.style.left = "auto";
		[].forEach.call(gallery.options.photos, function (photo, index) {
			photo.style.marginTop =  "0px"
			photo.className = photo.className.replace(" selected", "")
		})
		document.removeEventListener("keyup", gallery.__keyup)
		if( this.options.onClose ) {
			this.options.onClose()
		}
	},
	setSelected:function (photoIndex) {
		if( photoIndex == this.options.selectedIndex ) { return }
		if(this.options.selectedIndex != null) {
			this.selectedPhoto().className = this.selectedPhoto().className.replace(" selected", "")
		}
		this.options.selectedIndex = photoIndex
		this.focusSelected()
	},
	focusNext: function () {
		var photosLen = this.options.photos.length,
		next = this.options.selectedIndex + 1

		if( next < photosLen ) {
			this.setSelected(this.options.selectedIndex + 1)
		}
	},
	focusPrev: function () {
		var prev = this.options.selectedIndex - 1
		if( prev >= 0 ) {
			this.setSelected(prev)
		}
	},
	selectedPhoto:function () {
		return this.options.photos.item(this.options.selectedIndex)
	},
	calculateWidth:function () {
		var gallery = this,
		width = 0;
		[].forEach.call(gallery.el.querySelectorAll("li"), function (li) {
			var style = getComputedStyle(li)
			width += li.offsetWidth + parseInt( style.marginLeft ) + parseInt( style.marginRight )
		})

		return width
	},
	focusSelected: function () {
		var photo = this.selectedPhoto(),
		photoLen = this.options.photos.length,
		lastPhoto = this.options.photos.item(photoLen - 1),
		oldWidth = photo.offsetWidth,
		ul = this.el.querySelector("ul")


		if( !/selected/.test(photo.className) ) {
			photo.className += " selected"
		}
		ul.style.width = this.calculateWidth() + "px"

		ul.style.left = (-1 * (photo.offsetLeft - (this.el.offsetWidth / 2 - photo.offsetWidth / 2))) + "px"
		this.positionPhotos()
	},
	positionPhotos:function () {
		var gallery = this,
		ul = gallery.el.querySelector("ul"),
		computedULHeight = parseInt( getComputedStyle(ul).height ),
		selectedPhoto = this.selectedPhoto()

		if( selectedPhoto.offsetHeight > computedULHeight ) {
			ul.style.height = selectedPhoto.offsetHeight + "px";
			computedULHeight = parseInt( getComputedStyle(ul).height )
		};

		[].forEach.call(gallery.options.photos, function (photo, index) {
			photo.style.marginTop = (computedULHeight / 2) - (photo.offsetHeight / 2) + "px"
		})

	},
	render:function () {
		var gallery = this
		this.el.className += " gallery"

		this.focusSelected();
		[].forEach.call(this.options.photos, function (photo, index) {
			photo.addEventListener("click", function () {
				gallery.setSelected(index)
			})
		})

		document.addEventListener("keyup", gallery.__keyup)

		return gallery
	}
})

var ShuffledElements = Backbone.View.extend({
	__numElementsLoaded: 0,
	numElements:function () {
		return this.options.elements.length
	},
	positionHero:function (callback) {
		var shuffle = this,
		element = this.options.hero,
		image = element.querySelector("img")
		element.className += " shuffled"

		function position() {
			if( element.offsetHeight > shuffle.el.offsetHeight ) {
				shuffle.el.style.height = (element.offsetHeight) + "px"
			}
			
			var left = (shuffle.el.offsetWidth / 2) - (element.offsetWidth / 2),
			top = (shuffle.el.offsetHeight / 2) - (element.offsetHeight / 2)
			element.style.left = left + "px"
			element.style.top = top + "px"

			shuffle.__numElementsLoaded++
			callback.success()
		}

		if(image.width != 0) {
			position()
		} else {
			image.onload = function () {
				position()
			}
		}

		
	},
	__bindElementClick: function (photo, index) {
		var shuffle = this
		if( this.options.elementClick ) {
			photo.addEventListener("click", function (e) {
				shuffle.options.elementClick(e, {element:photo, index:index})		
			})
		}
	},
	__getHeroBounds:function () {
		return {
			top:this.options.hero.offsetTop,
			left:this.options.hero.offsetLeft,
			right:this.options.hero.offsetLeft + this.options.hero.offsetWidth,
			bottom:this.options.hero.offsetTop + this.options.hero.offsetHeight,
			center:(this.options.hero.offsetLeft + (this.options.hero.offsetLeft + this.options.hero.offsetWidth)) / 2,
			verticalCenter:(this.options.hero.offsetTop + (this.options.hero.offsetTop + this.options.hero.offsetHeight)) / 2
		}
	},
	positionElement:function (photo, index) {
		if( photo == this.options.hero ) {
			return
		}

		var shuffle = this,
		photosContainer = this.el,
		bounds = shuffle.__getHeroBounds(),
		leftMultiplier = Math.cos(index),
		horizontalBounds = ((window.innerWidth - 200) / 2),
		top = (Math.random() * (photosContainer.offsetHeight - photo.offsetHeight)),
		left = bounds.center + (Math.cos(index) * 300) - (photo.offsetWidth / 2),
		rotate = Math.sin(index) * 10

		if( Math.cos(index) <= 0 ) {
			left -= 100
		} else {
			left += 100
		}

	
		photo.style.left = left + "px";
		photo.style.top = top + "px";
		photo.style.webkitTransform = "rotate(" + rotate + "deg)"
		photo.style.MozTransform = "rotate(" + rotate + "deg)"
		
		this.__numElementsLoaded++
		if( this.__numElementsLoaded == this.numElements() ) {
			photosContainer.style.opacity = 1
		}
		
	},
	render:function () {
		var shuffle = this;
		this.el.className += " shuffled-elements"
		shuffle.positionHero({
			success:function () {
				[].forEach.call(shuffle.options.elements, function (element, index) {
					element.className += " shuffled"
					function doPosition() {
						shuffle.__bindElementClick(element, index)
						shuffle.positionElement(element, index)
					}

					if( shuffle.options.elementShouldPosition ) {
						shuffle.options.elementShouldPosition({
							element:element,
							index:index,
							callback:doPosition
						})
					} else {
						doPosition()
					}
				})
			}
		});
		return shuffle
	}
})

window.addEventListener("DOMContentLoaded", function () {

	var loc = new Location(JSON.parse( document.getElementById("location").getAttribute("data-json") )),
	locationType = new Location(JSON.parse( document.getElementById("location").getAttribute("data-location_type") )),
	map = new google.maps.Map(document.getElementById("map"), {
		disableDefaultUI: true,
		zoom: 4,
		center: new google.maps.LatLng(loc.get("latitude"), loc.get("longitude")),
		mapTypeId: google.maps.MapTypeId.HYBRID
		}),
	gallery = null

	new LocationMarker({
	model:loc,
	map:map,
	locationType:locationType
	}).render();

	var locationPhotos = document.getElementById("photos").querySelectorAll("figure")

	var shuffleHash = {
		el:document.getElementById("photos"),
		hero:document.getElementById("photos").querySelector(".hero"),
		elements:Array.prototype.slice.call(locationPhotos, 0, 30),
		elementClick: function (event, options) {
			if( !gallery ) {
				gallery = new Gallery({
						el:shuffleHash.el,
						photos:locationPhotos,
						selectedIndex:options.index,
						onClose:function () {
							gallery = null
							
						}
					}).render()
			}
		},
		elementShouldPosition: function (options) {
			var photo = options.element.querySelector("img")
			if( photo.width != 0 ) {
				options.callback()
			} else {
				photo.onload = function () {
					options.callback()
				}
			}
		}
	}

	new ShuffledElements(shuffleHash).render()

	

	})
</script>
<% end %>
