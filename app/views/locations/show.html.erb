<article id="location" data-json="<%= @location.to_json %>">
	<header class="autoclear">
		<%= image_tag @location.user.photo.large, :class => "rounded-large left", :width => 80 %>
		<h1>
			<%= link_to user_path(@location.user.slug) do %>
				<%= @location.user.name %>'s<% end %> trip to
			<% if @location.title %>
				<%= location_string(@location) %>
			<% else %>
				<%= @location.geo_string %>
			<% end %>
		</h1>
	</header>
	<%= render "locations/photos", :photos => @location.photos, :location => @location %>
	<section id="posts">
		<% @location.journal_entries.each do |entry| %>
			<section class="post">
				<h1><%= entry.title %></h1>	
				<div><%= entry.body.html_safe %></div>
			</section>
		<% end %>
	</section>
	<figure id="map"></figure>
	<br class="clear" />
</article>

<% content_for :scripts_footer do %>
	<script>

	window.addEventListener("DOMContentLoaded", function () {

		var loc = Location.createFromDataAttribute( document.getElementById("location") ),
		map = new google.maps.Map(document.getElementById("map"), {
			disableDefaultUI: true,
			zoom: 4,
			center: new google.maps.LatLng(loc.get("latitude"), loc.get("longitude")),
			mapTypeId: google.maps.MapTypeId.HYBRID
			}),
		gallery = null

		new LocationMarker({
		model:loc,
		map:map,
		}).render();

		if( !document.getElementById("photos") ) { return }
		var locationPhotos = document.getElementById("photos").querySelectorAll("figure"),
		hero = document.getElementById("photos").querySelector(".hero") || locationPhotos[0];
		hero.className += " hero";

		if( locationPhotos.length === 0 ) { return }
		var heroIndex = (function () {
			var index = 0;
			[].forEach.call(locationPhotos, function (photo, i) {
				if( photo == hero ) {
					index = i
				}
			})

			return index;
		})();


		var shuffleHash = {
			el:document.getElementById("photos"),
			hero:hero,
			elements:Array.prototype.slice.call(locationPhotos, 0, 30),
			heroClick: function () {
				if( !gallery ) {
					gallery = new Gallery({
							el:shuffleHash.el,
							photos:locationPhotos,
							selectedIndex:heroIndex,
							onClose:function () {
								gallery = null
								
							}
						}).render()
				}
			},
			elementClick: function (event, options) {
				if( !gallery ) {
					gallery = new Gallery({
							el:shuffleHash.el,
							photos:locationPhotos,
							selectedIndex:options.index,
							onClose:function () {
								gallery = null
								
							}
						}).render()
				}
			},
			elementShouldPosition: function (options) {
				var photo = options.element.querySelector("img")
				if( photo.width != 0 ) {
					options.callback()
				} else {
					photo.onload = function () {
						options.callback()
					}
				}
			}
		}

		new ShuffledElements(shuffleHash).render()

		})
	</script>
<% end %>
